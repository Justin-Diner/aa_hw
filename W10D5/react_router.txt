React Router is a frontend routing library that allows you to control which components to display using the browser location. 
BrowserRouter is the primary component of the router that wraps your route hierarchy. It makes routing information from React Router available to all its descendent components. React Router helps your React application render specific components based on the URL path. 

The React Router component you'll use most often is <Route>. The behavior of the <Route> component is controlled by the following props: exact and path.

// ./src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter } from 'react-router-dom';
import App from './App';

const Root = () => {
  return (
    <BrowserRouter>
      <App />
    </BrowserRouter>
  );
};

const Root = () => {
  return (
    <BrowserRouter>
      <div>
        <Route path="/">
          <App />
        </Route>
        <Route path="/users">
          <Users />
        </Route>
      </div>
    </BrowserRouter>
  );
};
The wrapped component App will be rendered only when the path is matched. The path matches the URL when it matches some initial portion of the URL. For example, a path of / would match both / and /users URLs. (/ matches the URL /users because /users begins with a /.)

exact prop
If this exact flag is set as a prop in the Route component, the path will match only when it exactly matches the URL.

Path params and useParams
A component's props can also hold information about a URL's parameters. The router will match route segments starting at : up to the next /, ?, or #. Such segments are wildcard values that make up your route parameters.

<Route path="/users/:userId">
  <Profile />
</Route>

The Profile component can access the :userId part of the http://localhost:3000/users/:userId URL through a function given by React Router called useParams. useParams returns information about all the wildcard values in your route parameters. To use it, simply import the useParams function from react-router-dom and call it inside of a React component. It returns a params object. 

For example:
import React from 'react';
import { useParams } from 'react-router-dom';

function Example() {
  const params = useParams();
}

The params object would then have a property of userId which would hold the value of the :userId wildcard value. 

The useParams function is a specific type of function used in React components called a hook. Hooks are functions that give a component access to data that doesn't need to be passed down directly by the parent component. They also help manage the flow of data across the multiple renders of a React component.

React Router Navigation
Now that you know how to create front-end routes with React Router, you'll need to implement a way for your users to navigate the routes! React Router's Link, NavLink, and Redirect components, and React Router's useHistory hook can help you do this.

<Link> or <NavLink> to create links with relative paths to routes in your application (like "/users/1")
<Redirect> to redirect a user to another path (e.g., a login page when the user is not logged in)
React Router's useHistory hook to update a browser's URL programmatically.

Adding links for navigation
React Router's <Link> is one way to simplify navigation around your app. It issues an on-click navigation event to a route defined in your app's router. Using <Link> renders an anchor tag with a correctly set href attribute.

Note that <Link> can take two props: to and onClick. The to prop is a route location description that points to an absolute path (e.g., /users).

NavLink
The <NavLink> works just like a <Link> but with a little extra functionality. It has the ability to add extra styling when the path it links to matches the current path. This makes it an ideal choice for a navigation bar, hence the name. 

 This styling can be controlled by three extra props: activeClassName, activeStyle, and exact.
 The activeClassName prop of the NavLink component allows you to set a CSS class name for styling the NavLink when its route is active. By default, the activeClassName is set to active. This means that you simply need to add an .active class to your CSS file to add active styling to your link. A NavLink will be active if its to prop path matches the current URL.

Switching between routes
 React Router's <Switch> component can help you control the switching between routes.

Redirecting users
What if you want to redirect users to a login page when they aren't logged in? The <Redirect> component from React Router helps you redirect users!
The <Redirect> component takes only one prop: to. When it renders, it replaces the current URL with the value of its to prop. 
The example below checks whether the wildcard of userId in the Profile component is an invalid id of 0. If so, then it will redirect the user to the home page, /.

// ./src/components/Profile.js
import React from "react";
import { Redirect, useParams } from 'react-router-dom';

const Profile = () => {
  const params = useParams();
  const { userId } = params;

  if (userId === "0") return <Redirect to="/" />;

  return <h1>Hello from User Profile {userId}!</h1>
}

export default Profile;

Note that useParams returns parameters as strings, so we have to check the value of userId against "0" instead of 0.

useHistory 
The useHistory hook returns a history object that has convenient methods for navigation. history lets you update the URL programmatically.

It has two useful methods:

push - This adds a new URL to the end of the history stack. That means that clicking the back button will take the browser to the previous URL. Note that pushing the same URL multiple times in a row will have no effect; the URL will still only show up on the stack once. In development mode, pushing the same URL twice in a row will generate a console warning. This warning is disabled in production mode.
replace - This replaces the current URL on the history stack, so the back button won't return you to the current URL. Note: You should try to use <Redirect>, <Link>, or <NavLink> before using useHistory to redirect your user.

useRouteMatch hook
The useRouteMatch hook returns a match object with a key of url.

React Router Documentation
Now that you've had an introduction to React Router, feel free to explore the official documentation to learn more! As you become a full-fledged software engineer, remember that documentation is your friend. You can take a brief overview for now, as the documentation might include a lot of information at first. The more you learn about React, the more you should revisit the official documentation and learn!

Setting up React Router
React Router Quick Start
BrowserRouter
HashRouter
Routes and Links
Route
Link
NavLink
Switch and Redirect
Switch
Redirect
React Router hooks
useParams
useHistory
useLocation
useRouteMatch