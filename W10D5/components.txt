A React function component is a function that returns a JSX element. The name of the function is PascalCase by convention.
For example, a function component that renders a navigation bar and will return a JSX element like so:

function NavBar() {
  return (
    <nav>
      <h1>Pet App</h1>
      <ul>
        <li className="selected">
          <a href="/pets">Pets</a>
        </li>
        <li>
          <a href="/owners">Owners</a>
        </li>
      </ul>
    </nav>
  );
}

To convert this into real DOM, you can use the ReactDOM.render function and use the NavBar component as a JSX element.
// Get a DOM node for React to render to
const rootElement = document.getElementById('root');

// Give React the element tree and the target
ReactDOM.render(<NavBar />, rootElement);

 This will nest the real DOM converted from the nav JSX element returned from the NavBar function in the real DOM element with the id of root. Note: you cannot define HTML attributes when rendering a function component as a JSX element: <NavBar className="nav-bar" /> will not apply an HTML attribute of class onto any of the rendered elements in NavBar.

 You MUST return something from a function component. You cannot return undefined from a function component. React will not build correctly when trying to render a component that returns undefined If you don't want to render anything from a component, then return null instead.

 React.fragment
 React function components need to always return one JSX element as the highest level tag. There will be a React compilation error if there is more than one outermost parent element returned from a function component.

 There are two ways to solve this issue. 
 	1. wrap the elements in a parent element like another div, but this would generate another real HTML element. 
	2. wrap the elements in a JSX element called React.fragment and no other real HTML element will be created.

	
function CorrectComponent() {
  // returns two div tags wrapped in React.fragment (WILL WORK)
  return (
    <React.fragment>
      <div></div>
      <div></div>
    </React.fragment>
  );
}

You can also return empty tags that will be read in JSX as React.fragment.

function CorrectComponent() {
  // returns two div tags wrapped in empty tags (WILL WORK)
  return (
    <>
      <div></div>
      <div></div>
    </>
  );
}